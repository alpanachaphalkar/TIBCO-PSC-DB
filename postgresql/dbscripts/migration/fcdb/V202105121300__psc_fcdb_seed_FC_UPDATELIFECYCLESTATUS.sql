CREATE OR REPLACE FUNCTION fc_updatelifecyclestatus_pkg_get_record(witemid character varying)
  RETURNS void AS
$BODY$
DECLARE 

	catalogId WORKITEMDETAIL.VALUE%TYPE;
	productKeyId WORKITEMDETAIL.VALUE%TYPE;
	productVersion WORKITEMDETAIL.VALUE%TYPE;
	recordCount DECIMAL(10);
	sQuery VARCHAR(1000);
	sPreviousStatus VARCHAR(100);
BEGIN
		
	SELECT WORKITEMDETAIL.VALUE INTO catalogId FROM WORKITEM, WORKITEMDETAIL
	WHERE WORKITEMDETAIL.WORKITEMID = WORKITEM.ID
	AND WORKITEM.ID = to_number(wItemId)
	AND WORKITEM.ACTIVITYNAME IN ('InternalEditWorkItem', 'InternalApprovalWorkItemModify', 'InternalApprovalWorkItemDelete')
	AND WORKITEMDETAIL.NAME = 'MASTERCATALOGID';
						
	SELECT WORKITEMDETAIL.VALUE INTO productKeyId FROM WORKITEM, WORKITEMDETAIL
	WHERE WORKITEMDETAIL.WORKITEMID = WORKITEM.ID
	AND WORKITEM.ID = to_number(wItemId)
	AND WORKITEM.ACTIVITYNAME IN ('InternalEditWorkItem', 'InternalApprovalWorkItemModify', 'InternalApprovalWorkItemDelete')
	AND NAME = 'PRODUCTKEYID';
				
	SELECT WORKITEMDETAIL.VALUE INTO productVersion FROM WORKITEM, WORKITEMDETAIL
	WHERE WORKITEMDETAIL.WORKITEMID = WORKITEM.ID
	AND WORKITEM.ID = to_number(wItemId)
	AND WORKITEM.ACTIVITYNAME IN ('InternalEditWorkItem', 'InternalApprovalWorkItemModify', 'InternalApprovalWorkItemDelete')
	AND NAME = 'PRODUCTVERSION';


	
	EXECUTE 'SELECT clifecyclestatus as varchar FROM MCT_' || catalogId || ' WHERE CPRODUCTKEYID = ' || to_number(productKeyId) || ' AND CMODVERSION = ' || to_number(productVersion)  INTO sPreviousStatus;
	  
	IF sPreviousStatus IS NULL OR TRIM(sPreviousStatus) = '' THEN
		sPreviousStatus := 'TESTING';
	END IF;
  
	DELETE FROM LIFECYCLE_STATUS WHERE CPRODUCTKEYID = to_number(productKeyId);
	INSERT INTO LIFECYCLE_STATUS (CPRODUCTKEYID, CLIFECYCLESTATUS, TIMESTAMPFORMAT) VALUES (to_number(productKeyId), sPreviousStatus , CURRENT_TIMESTAMP);
	INSERT INTO LIFECYCLE_STATUS (CPRODUCTKEYID, CLIFECYCLESTATUS, TIMESTAMPFORMAT) VALUES (to_number(productKeyId), 'PENDINGAPPROVAL' , CURRENT_TIMESTAMP);  
	
	EXECUTE 'UPDATE MCT_' || catalogId || ' SET CLIFECYCLESTATUS = ''PENDINGAPPROVAL'' WHERE CPRODUCTKEYID = ' || to_number(productKeyId) || ' AND CMODVERSION = ' || to_number(productVersion) ;
	
	SELECT WORKITEMDETAIL.VALUE INTO recordCount FROM WORKITEM, WORKITEMDETAIL 
	WHERE WORKITEMDETAIL.WORKITEMID = WORKITEM.ID
	AND WORKITEM.ID = to_number(wItemId)
	AND WORKITEM.ACTIVITYNAME IN ('InternalEditWorkItem', 'InternalApprovalWorkItemModify', 'InternalApprovalWorkItemDelete')
	AND NAME = 'RECORD_COUNT';
	
	IF recordCount > 1 THEN
		PERFORM FC_UPDATELIFECYCLESTATUS_PKG_UPDATE_LIFECYCLESTATUS(productKeyId, productVersion,catalogId);
	END IF;
END;
$BODY$
LANGUAGE plpgsql VOLATILE
COST 100;

DROP TYPE IF EXISTS T_CHILDRECORDS CASCADE;

CREATE  TYPE T_CHILDRECORDS AS(
	childid varchar(4000),
    childVersion varchar(4000)
);

CREATE OR REPLACE FUNCTION  FC_UPDATELIFECYCLESTATUS_PKG_UPDATE_LIFECYCLESTATUS(productKeyId IN WORKITEMDETAIL.VALUE%TYPE, productVersion IN WORKITEMDETAIL.VALUE%TYPE, catalogId IN WORKITEMDETAIL.VALUE%TYPE) RETURNS VOID AS
$BODY$
DECLARE 
    l_children T_CHILDRECORDS;
    sQuery VARCHAR(1000);
    sPreviousStatus VARCHAR(100);
BEGIN

	FOR l_children IN EXECUTE 'SELECT CHILDID, CHILDVERSION FROM RELATIONSHIP WHERE PARENTID =' || productKeyId || 'AND PARENTVERSION =' || productVersion || 'AND OWNERID =' || catalogId || 'AND CHILDOWNERID = '|| catalogId LOOP
		
		EXECUTE 'SELECT clifecyclestatus as varchar FROM MCT_' || catalogId || ' WHERE CPRODUCTKEYID = ' || l_children.childid || ' AND CMODVERSION = ' || l_children.childVersion INTO sPreviousStatus;
				
			IF sPreviousStatus IS NULL OR TRIM(sPreviousStatus) = '' THEN
				sPreviousStatus := 'TESTING';
			END IF;		
		  
			DELETE FROM LIFECYCLE_STATUS WHERE CPRODUCTKEYID = l_children.childid;
			INSERT INTO LIFECYCLE_STATUS (CPRODUCTKEYID, CLIFECYCLESTATUS, TIMESTAMPFORMAT) VALUES (l_children.childid, sPreviousStatus , CURRENT_TIMESTAMP);
			INSERT INTO LIFECYCLE_STATUS (CPRODUCTKEYID, CLIFECYCLESTATUS, TIMESTAMPFORMAT) VALUES (l_children.childid, 'PENDINGAPPROVAL' , CURRENT_TIMESTAMP);
		
		EXECUTE 'UPDATE MCT_' || catalogId || ' SET CLIFECYCLESTATUS = ''PENDINGAPPROVAL'' WHERE CPRODUCTKEYID = ' || l_children.childid || ' AND CMODVERSION = ' || l_children.childVersion;
		PERFORM FC_UPDATELIFECYCLESTATUS_PKG_UPDATE_LIFECYCLESTATUS(l_children.childid, l_children.childVersion, catalogId);
	END LOOP;

END;
$BODY$
LANGUAGE plpgsql VOLATILE
COST 100;